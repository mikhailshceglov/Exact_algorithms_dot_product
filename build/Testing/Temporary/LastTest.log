Start testing: Apr 21 22:08 MSK
----------------------------------------------------------
1/1 Testing: run_dot_product_tests
1/1 Test: run_dot_product_tests
Command: "/home/misha/leti/sem4/CM/lab2/build/dot_product_tests"
Directory: /home/misha/leti/sem4/CM/lab2/build
"run_dot_product_tests" start time: Apr 21 22:08 MSK
Output:
----------------------------------------------------------
[34m══════════════════════════════════════════════════
Тест #1: Простое скалярное произведение[0m
Вектор A: [1.000000e+00, 2.000000e+00, 3.000000e+00]
Вектор B: [4.000000e+00, 5.000000e+00, 6.000000e+00]
[33mТочное значение (GMP): 3.200000000000000e+01[0m

 - Алгоритм: Kobbelt    Результат: 3.200000000000000e+01 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 3.200000000000000e+01 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: 3.200000000000000e+01 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: 3.200000000000000e+01 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #2: Компенсация больших чисел[0m
Вектор A: [1.000000000000000e+100, 1.000000000000000e+00, -1.000000000000000e+100]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): 1.000000000000000e+00[0m

 - Алгоритм: Kobbelt    Результат: 1.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 1.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: 0.000000000000000e+00 GMP: [31m✗[0m Перестановки: [31m✗[0m
 - Алгоритм: Sorting    Результат: 1.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #3: Разные порядки величин[0m
Вектор A: [1.000000000000000e+30, 1.000000000000000e+00, -1.000000000000000e+30]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): 1.000000000000000e+00[0m

 - Алгоритм: Kobbelt    Результат: 1.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 1.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: 0.000000000000000e+00 GMP: [31m✗[0m Перестановки: [31m✗[0m
 - Алгоритм: Sorting    Результат: 1.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #4: Сложная компенсация[0m
Вектор A: [1.000000000000000e+00, 1.000000000000000e+100, 1.000000000000000e+00, -1.000000000000000e+100]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): 2.000000000000000e+00[0m

 - Алгоритм: Kobbelt    Результат: 2.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 1.000000000000000e+00 GMP: [31m✗[0m Перестановки: [31m✗[0m
 - Алгоритм: Pichat     Результат: 1.000000000000000e+00 GMP: [31m✗[0m Перестановки: [31m✗[0m
 - Алгоритм: Sorting    Результат: 2.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #5: Сумма малых чисел[0m
Вектор A: [2.220446049250313e-16, 2.220446049250313e-16]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): 4.440892098500626e-16[0m

 - Алгоритм: Kobbelt    Результат: 4.440892098500626e-16 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 4.440892098500626e-16 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: 4.440892098500626e-16 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: 4.440892098500626e-16 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #6: Чередующиеся знаки[0m
Вектор A: [1.000000000000000e+00, -1.000000000000000e+00, 1.000000000000000e+00, -1.000000000000000e+00]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): 0.000000000000000e+00[0m

 - Алгоритм: Kobbelt    Результат: 0.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 0.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: 0.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: 0.000000000000000e+00 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #7: NaN в данных[0m
Вектор A: [NaN, 2.000000000000000e+00]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): NaN[0m

 - Алгоритм: Kobbelt    Результат: nan GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: nan GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: nan GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: nan GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #8: Бесконечности[0m
Вектор A: [INF, 1.000000000000000e+00]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): INF[0m

 - Алгоритм: Kobbelt    Результат: inf GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: -nan GMP: [31m✗[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: inf GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: inf GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #9: Противоположные бесконечности[0m
Вектор A: [INF, -INF]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): NaN[0m

 - Алгоритм: Kobbelt    Результат: -nan GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: -nan GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: -nan GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: -nan GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m[34m══════════════════════════════════════════════════
Тест #10: Денормализованные числа[0m
Вектор A: [1.112536929253601e-308, 1.112536929253601e-308]
Вектор B: [1.000000000000000e+00, 1.000000000000000e+00]
[33mТочное значение (GMP): 2.225073858507201e-308[0m

 - Алгоритм: Kobbelt    Результат: 2.225073858507201e-308 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Long Acc   Результат: 2.225073858507201e-308 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Pichat     Результат: 2.225073858507201e-308 GMP: [32m✓[0m Перестановки: [32m✓[0m
 - Алгоритм: Sorting    Результат: 2.225073858507201e-308 GMP: [32m✓[0m Перестановки: [32m✓[0m
[34m══════════════════════════════════════════════════

[0m
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"run_dot_product_tests" end time: Apr 21 22:08 MSK
"run_dot_product_tests" time elapsed: 00:00:00
----------------------------------------------------------

End testing: Apr 21 22:08 MSK
